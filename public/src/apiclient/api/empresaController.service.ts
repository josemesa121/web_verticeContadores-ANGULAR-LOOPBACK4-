/**
 * LoopBack Application
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { Empresa } from '../model/empresa';
import { EmpresaExcludingId_ } from '../model/empresaExcludingId_';
import { EmpresaPartial } from '../model/empresaPartial';
import { Filter2 } from '../model/filter2';
import { InlineResponse200 } from '../model/inlineResponse200';
import { ObligacionInfo } from '../model/obligacionInfo';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class EmpresaControllerService {
  protected basePath = 'http://localhost:3000';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   *
   *
   * @param where
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerCount(
    where?: { [key: string]: any },
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse200>;
  public empresaControllerCount(
    where?: { [key: string]: any },
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse200>>;
  public empresaControllerCount(
    where?: { [key: string]: any },
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse200>>;
  public empresaControllerCount(
    where?: { [key: string]: any },
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (where !== undefined && where !== null) {
      queryParameters = queryParameters.set('where', <any>where);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<InlineResponse200>(`${this.basePath}/empresas/count`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerCreate(
    body?: EmpresaExcludingId_,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Empresa>;
  public empresaControllerCreate(
    body?: EmpresaExcludingId_,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Empresa>>;
  public empresaControllerCreate(
    body?: EmpresaExcludingId_,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Empresa>>;
  public empresaControllerCreate(
    body?: EmpresaExcludingId_,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Empresa>(`${this.basePath}/empresas`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param id
   * @param oid
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerCreateEmpresaObligacion(
    id: number,
    oid: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<ObligacionInfo>>;
  public empresaControllerCreateEmpresaObligacion(
    id: number,
    oid: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<ObligacionInfo>>>;
  public empresaControllerCreateEmpresaObligacion(
    id: number,
    oid: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<ObligacionInfo>>>;
  public empresaControllerCreateEmpresaObligacion(
    id: number,
    oid: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling empresaControllerCreateEmpresaObligacion.'
      );
    }

    if (oid === null || oid === undefined) {
      throw new Error(
        'Required parameter oid was null or undefined when calling empresaControllerCreateEmpresaObligacion.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.post<Array<ObligacionInfo>>(
      `${this.basePath}/empresas/${encodeURIComponent(String(id))}/obligaciones/${encodeURIComponent(String(oid))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerDeleteById(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public empresaControllerDeleteById(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public empresaControllerDeleteById(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public empresaControllerDeleteById(id: number, observe: any = 'body', reportProgress = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling empresaControllerDeleteById.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<any>(`${this.basePath}/empresas/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param id
   * @param oid
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerDeleteEmpresaObligacion(
    id: number,
    oid: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<ObligacionInfo>>;
  public empresaControllerDeleteEmpresaObligacion(
    id: number,
    oid: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<ObligacionInfo>>>;
  public empresaControllerDeleteEmpresaObligacion(
    id: number,
    oid: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<ObligacionInfo>>>;
  public empresaControllerDeleteEmpresaObligacion(
    id: number,
    oid: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling empresaControllerDeleteEmpresaObligacion.'
      );
    }

    if (oid === null || oid === undefined) {
      throw new Error(
        'Required parameter oid was null or undefined when calling empresaControllerDeleteEmpresaObligacion.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<Array<ObligacionInfo>>(
      `${this.basePath}/empresas/${encodeURIComponent(String(id))}/obligaciones/${encodeURIComponent(String(oid))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerFind(
    filter?: Filter2,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<Empresa>>;
  public empresaControllerFind(
    filter?: Filter2,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<Empresa>>>;
  public empresaControllerFind(
    filter?: Filter2,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<Empresa>>>;
  public empresaControllerFind(filter?: Filter2, observe: any = 'body', reportProgress = false): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (filter !== undefined && filter !== null) {
      queryParameters = queryParameters.set('filter', <any>filter);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<Empresa>>(`${this.basePath}/empresas`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerFindById(id: number, observe?: 'body', reportProgress?: boolean): Observable<Empresa>;
  public empresaControllerFindById(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Empresa>>;
  public empresaControllerFindById(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Empresa>>;
  public empresaControllerFindById(id: number, observe: any = 'body', reportProgress = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling empresaControllerFindById.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Empresa>(`${this.basePath}/empresas/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param id
   * @param oid
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerFindEmpresaObligacion(
    id: number,
    oid: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<ObligacionInfo>>;
  public empresaControllerFindEmpresaObligacion(
    id: number,
    oid: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<ObligacionInfo>>>;
  public empresaControllerFindEmpresaObligacion(
    id: number,
    oid: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<ObligacionInfo>>>;
  public empresaControllerFindEmpresaObligacion(
    id: number,
    oid: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling empresaControllerFindEmpresaObligacion.'
      );
    }

    if (oid === null || oid === undefined) {
      throw new Error(
        'Required parameter oid was null or undefined when calling empresaControllerFindEmpresaObligacion.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<ObligacionInfo>>(
      `${this.basePath}/empresas/${encodeURIComponent(String(id))}/obligaciones/${encodeURIComponent(String(oid))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerFindObligaciones(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<ObligacionInfo>>;
  public empresaControllerFindObligaciones(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<ObligacionInfo>>>;
  public empresaControllerFindObligaciones(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<ObligacionInfo>>>;
  public empresaControllerFindObligaciones(id: number, observe: any = 'body', reportProgress = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling empresaControllerFindObligaciones.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<ObligacionInfo>>(
      `${this.basePath}/empresas/obligaciones/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerFindObligacionesConfig(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<ObligacionInfo>>;
  public empresaControllerFindObligacionesConfig(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<ObligacionInfo>>>;
  public empresaControllerFindObligacionesConfig(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<ObligacionInfo>>>;
  public empresaControllerFindObligacionesConfig(
    id: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling empresaControllerFindObligacionesConfig.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<ObligacionInfo>>(
      `${this.basePath}/empresas/obligaciones-config/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param start
   * @param end
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerFindObligacionesRango(
    start: string,
    end: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<ObligacionInfo>>;
  public empresaControllerFindObligacionesRango(
    start: string,
    end: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<ObligacionInfo>>>;
  public empresaControllerFindObligacionesRango(
    start: string,
    end: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<ObligacionInfo>>>;
  public empresaControllerFindObligacionesRango(
    start: string,
    end: string,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (start === null || start === undefined) {
      throw new Error(
        'Required parameter start was null or undefined when calling empresaControllerFindObligacionesRango.'
      );
    }

    if (end === null || end === undefined) {
      throw new Error(
        'Required parameter end was null or undefined when calling empresaControllerFindObligacionesRango.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<ObligacionInfo>>(
      `${this.basePath}/empresas/obligaciones-rango/${encodeURIComponent(String(start))}/${encodeURIComponent(
        String(end)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *
   * @param id
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerReplaceById(
    id: number,
    body?: Empresa,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public empresaControllerReplaceById(
    id: number,
    body?: Empresa,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public empresaControllerReplaceById(
    id: number,
    body?: Empresa,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public empresaControllerReplaceById(
    id: number,
    body?: Empresa,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling empresaControllerReplaceById.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<any>(`${this.basePath}/empresas/${encodeURIComponent(String(id))}`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param body
   * @param where
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerUpdateAll(
    body?: EmpresaPartial,
    where?: { [key: string]: any },
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<InlineResponse200>;
  public empresaControllerUpdateAll(
    body?: EmpresaPartial,
    where?: { [key: string]: any },
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<InlineResponse200>>;
  public empresaControllerUpdateAll(
    body?: EmpresaPartial,
    where?: { [key: string]: any },
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<InlineResponse200>>;
  public empresaControllerUpdateAll(
    body?: EmpresaPartial,
    where?: { [key: string]: any },
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (where !== undefined && where !== null) {
      queryParameters = queryParameters.set('where', <any>where);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.patch<InlineResponse200>(`${this.basePath}/empresas`, body, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   *
   * @param id
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public empresaControllerUpdateById(
    id: number,
    body?: EmpresaPartial,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public empresaControllerUpdateById(
    id: number,
    body?: EmpresaPartial,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public empresaControllerUpdateById(
    id: number,
    body?: EmpresaPartial,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public empresaControllerUpdateById(
    id: number,
    body?: EmpresaPartial,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling empresaControllerUpdateById.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.patch<any>(`${this.basePath}/empresas/${encodeURIComponent(String(id))}`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  public empresaControllerFindObligacionesConfigByAnio(
    id: number,
    id_anio: number,
    observe: any = 'body',
    reportProgress = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling empresaControllerFindObligacionesConfig.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<ObligacionInfo>>(
      `${this.basePath}/empresas/obligaciones-config/${encodeURIComponent(String(id))}/year/${encodeURIComponent(
        String(id_anio)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  public obligacionAnios(observe: any = 'body', reportProgress = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<ObligacionInfo>>(`${this.basePath}/empresas/obligaciones-anios`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   *
   */
  public empresaControllerFindObligacionesByAnioId(
    id: number,
    idAnio: number,
    observe?: 'body',
    reportProgress?: false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling empresaControllerFindObligaciones.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<ObligacionInfo>>(
      `${this.basePath}/empresas/${encodeURIComponent(String(id))}/obligacionesbyanio/${encodeURIComponent(
        String(idAnio)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
